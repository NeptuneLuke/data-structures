/* */
public LinkedList()
public LinkedList(int k)
public void destroy()
/* */


/* */
public boolean listEmpty()
public int size()
public boolean exist(int k)
public Node extractFirstNode(int k)
public Node extractLastNode(int k)
public LinkedList extractAll(int k)
public int countValues(int k)
/* */


/* */
public void insertAsFirst(int k)
public boolean deleteFirst()
public void insertAsLast(int k)
public boolean deleteLast()
public boolean insertAt(int data, int pos)
public boolean deleteAt(int pos)
public boolean deleteAllData(int k)
/* */


/* */
public Node getFirstNode()
public int getFirstData()
public Node getLastNode()
public int getLastData()
public Node getNodeAt(int pos)
public int getDataAt(int pos)
public boolean setFirstData(int newData)
public boolean setLastData(int newData)
public boolean setDataAt(int newData, int pos)
public void swap(int pos1, int pos2)
public void swap(Node first, Node second)
public int indexOf(Node node)
public Node previous(Node node)
public Node previous(int pos)
public Node successor(Node node)
public Node successor(int pos)
public boolean replaceNodeAt(Node newNode, int pos)
public boolean replaceNodeAt(Node newNode, Node node)
/* */


/* */
public LinkedList duplicate()			
public LinkedList copy()
public LinkedList concatenate(LinkedList secondList)
public void orderNodes()
public void orderData()
public void reverse()
public void cutEnd(Node fromNode)
public void cutEnd(int pos)
public void cutFromTo(int fromPos, int toPos)
public void cutFromTo(Node fromNode, Node toNode)
public void cutEdges()
public LinkedList subList(int fromPos, int toPos)
public LinkedList subList(Node fromNode, Node toNode)
public LinkedList merge(LinkedList secondList)
/* */


/* */
public void print()
public void printReference()
public void printReverse()
public void printReverseReference()
/* */


/* */
public void multiplyBy(int k)
public void divideBy(int k)
public void sumBy(int k)
public void subtractBy(int k)
public int minData()
public Node minNode()
public int maxData()
public Node maxNode()
public LinkedList intersection(LinkedList secondList)
public LinkedList union(LinkedList secondList)
/* */
